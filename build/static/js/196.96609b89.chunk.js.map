{"version":3,"sources":["views/apps/users/UsersList.js"],"names":["UsersList","state","rowData","paginationPageSize","currenPageSize","getPageSize","defaultColDef","sortable","editable","resizable","suppressMenu","columnDefs","headerName","valueGetter","field","width","filter","cellRendererFramework","params","className","data","userid","fullname","mobile","email","address","city","planId","pack_name","date","expdate","value","status","pinned","window","innerWidth","render","history","color","size","onClick","push","_id","selectedData","gridApi","getSelectedRows","runthisfunction","updateRowData","remove","onGridReady","api","gridColumnApi","columnApi","setState","paginationGetCurrentPage","paginationGetPageSize","totalPages","paginationGetTotalPages","updateSearchQuery","val","setQuickFilter","filterSize","paginationSetPageSize","Number","axiosConfig","get","then","response","id","console","log","this","sm","col-sm-6","tag","length","right","placeholder","onChange","e","target","Ripple","exportDataAsCsv","Consumer","context","gridOptions","rowSelection","colResizeDefault","animateRows","floatingFilter","pagination","pivotPanelShow","enableRtl","direction","React","Component"],"mappings":";0rNAwBMA,E,4MACJC,MAAQ,CACNC,QAAS,GACTC,mBAAoB,GACpBC,eAAgB,GAChBC,YAAa,GACbC,cAAe,CACbC,UAAU,EACVC,UAAU,EACVC,WAAW,EACXC,cAAc,GAEhBC,WAAY,CACV,CACEC,WAAY,OACZC,YAAa,oBACbC,MAAO,oBACPC,MAAO,IACPC,QAAQ,GAKV,CACEJ,WAAY,aACZE,MAAO,WACPC,MAAO,IACPE,sBAAuB,SAACC,GACtB,OACE,yBAAKC,UAAU,4CACb,8BAAOD,EAAOE,KAAKC,OAAOC,aAKlC,CACEV,WAAY,SACZE,MAAO,SACPC,MAAO,IACPE,sBAAuB,SAACC,GACtB,OACE,yBAAKC,UAAU,4CACb,8BAAOD,EAAOE,KAAKC,OAAOE,WAMlC,CACEX,WAAY,WACZE,MAAO,QACPC,MAAO,IACPE,sBAAuB,SAACC,GACtB,OACE,yBAAKC,UAAU,4CACb,8BAAOD,EAAOE,KAAKC,OAAOG,UAMlC,CACEZ,WAAY,UACZE,MAAO,UACPC,MAAO,IACPE,sBAAuB,SAACC,GACtB,OACE,yBAAKC,UAAU,4CACb,8BAAOD,EAAOE,KAAKC,OAAOI,YAKlC,CACEb,WAAY,OACZE,MAAO,OACPC,MAAO,IACPE,sBAAuB,SAACC,GACtB,OACE,yBAAKC,UAAU,4CACb,8BAAOD,EAAOE,KAAKC,OAAOK,SAKlC,CACEd,WAAY,kBACZE,MAAO,YACPC,MAAO,IACPE,sBAAuB,SAACC,GACtB,OACE,yBAAKC,UAAU,4CACb,8BAAOD,EAAOE,KAAKO,OAAOC,cAKlC,CACEhB,WAAY,aACZE,MAAO,OACPC,MAAO,IACPE,sBAAuB,SAACC,GACtB,OACE,yBAAKC,UAAU,4CAEb,8BAAOD,EAAOE,KAAKS,SAM3B,CACEjB,WAAY,cACZE,MAAO,UACPC,MAAO,IACPE,sBAAuB,SAACC,GACtB,OACE,yBAAKC,UAAU,4CACb,8BAAOD,EAAOE,KAAKU,YAM3B,CACElB,WAAY,SACZE,MAAO,SACPE,QAAQ,EACRD,MAAO,IACPE,sBAAuB,SAACC,GACtB,MAAwB,WAAjBA,EAAOa,MACZ,yBAAKZ,UAAU,kCACZD,EAAOE,KAAKY,QAEI,aAAjBd,EAAOa,MACT,yBAAKZ,UAAU,kCACZD,EAAOE,KAAKY,QAEb,OAGR,CACEpB,WAAY,UACZE,MAAO,YACPC,MAAO,IACPkB,OAAQC,OAAOC,WAAa,KAAM,QAClClB,sBAAuB,SAACC,GACtB,OACE,yBAAKC,UAAU,0BACb,kBAAC,IAAD,CACEiB,OAAQ,gBAAGC,EAAH,EAAGA,QAAH,OACN,kBAAC,IAAD,CACElB,UAAU,QACVmB,MAAM,QACNC,KAAM,GACNC,QAAS,kBACPH,EAAQI,KAAR,+BAAqCvB,EAAOE,KAAKsB,YAKzD,kBAAC,IAAD,CACEN,OAAQ,gBAAGC,EAAH,EAAGA,QAAH,OACN,kBAAC,IAAD,CACElB,UAAU,QACVoB,KAAK,OACLD,MAAM,OACNE,QAAS,kBACPH,EAAQI,KAAR,+BAAqCvB,EAAOE,KAAKsB,YAMzD,kBAAC,IAAD,CACEvB,UAAU,QACVoB,KAAK,OACLD,MAAM,MACNE,QAAS,WACP,IAAIG,EAAe,EAAKC,QAAQC,kBAChC,EAAKC,gBAAgB5B,EAAOE,KAAKsB,KACjC,EAAKE,QAAQG,cAAc,CAAEC,OAAQL,Y,EAsBrDM,YAAc,SAAC/B,GACb,EAAK0B,QAAU1B,EAAOgC,IACtB,EAAKC,cAAgBjC,EAAOkC,UAC5B,EAAKC,SAAS,CACZjD,eAAgB,EAAKwC,QAAQU,2BAA6B,EAC1DjD,YAAa,EAAKuC,QAAQW,wBAC1BC,WAAY,EAAKZ,QAAQa,6B,EAI7BC,kBAAoB,SAACC,GACnB,EAAKf,QAAQgB,eAAeD,I,EAG9BE,WAAa,SAACF,GACR,EAAKf,UACP,EAAKA,QAAQkB,sBAAsBC,OAAOJ,IAC1C,EAAKN,SAAS,CACZjD,eAAgBuD,EAChBtD,YAAasD,M,8FAhCnB,yGACQK,IAAYC,IAAI,kBAAkBC,MAAK,SAACC,GAC5C,IAAIjE,EAAUiE,EAAS/C,KAAKA,KAC5B,EAAKiC,SAAS,CAAEnD,eAHpB,2C,0HAMA,WAAsBkE,GAAtB,wEACEC,QAAQC,IAAIF,GADd,SAEQJ,IAAYC,IAAZ,0BAAmCG,IAAMF,MAAK,SAACC,GACnDE,QAAQC,IAAIH,MAHhB,2C,2EA+BA,WAAU,IAAD,OACP,EAA+CI,KAAKtE,MAA5CC,EAAR,EAAQA,QAASS,EAAjB,EAAiBA,WAAYL,EAA7B,EAA6BA,cAC7B,OACE,kBAAC,IAAD,CAAKa,UAAU,iBACb,kBAAC,IAAD,CAAKqD,GAAG,OACR,kBAAC,IAAD,CAAKA,GAAG,MACN,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAKrD,UAAU,OACb,kBAAC,IAAD,KACE,wBAAIsD,YAAA,EAAStD,UAAU,cAAvB,gBAMJ,kBAAC,IAAD,CAAUA,UAAU,QACM,OAAvBoD,KAAKtE,MAAMC,QAAmB,KAC7B,yBAAKiB,UAAU,8CACb,yBAAKA,UAAU,+DACb,yBAAKA,UAAU,QACb,kBAAC,IAAD,CAAsBA,UAAU,mBAC9B,kBAAC,IAAD,CAAgBuD,IAAI,OACjBH,KAAK3B,QACF2B,KAAKtE,MAAMG,eACX,GAAKmE,KAAKtE,MAAMI,aACfkE,KAAKtE,MAAMI,YAAc,GAAI,IAJpC,IAKI,IACDkE,KAAKtE,MAAMC,QAAQyE,OAClBJ,KAAKtE,MAAMG,eAAiBmE,KAAKtE,MAAMI,YACzC,EACIkE,KAAKtE,MAAMG,eAAiBmE,KAAKtE,MAAMI,YACvCkE,KAAKtE,MAAMC,QAAQyE,OAAQ,IAVjC,MAWMJ,KAAKtE,MAAMC,QAAQyE,OACvB,kBAAC,IAAD,CAAaxD,UAAU,QAAQoB,KAAM,MAEvC,kBAAC,IAAD,CAAcqC,OAAK,GACjB,kBAAC,IAAD,CACEF,IAAI,MACJlC,QAAS,kBAAM,EAAKqB,WAAW,MAFjC,MAMA,kBAAC,IAAD,CACEa,IAAI,MACJlC,QAAS,kBAAM,EAAKqB,WAAW,MAFjC,MAMA,kBAAC,IAAD,CACEa,IAAI,MACJlC,QAAS,kBAAM,EAAKqB,WAAW,OAFjC,OAMA,kBAAC,IAAD,CACEa,IAAI,MACJlC,QAAS,kBAAM,EAAKqB,WAAW,OAFjC,UASN,yBAAK1C,UAAU,iDACb,yBAAKA,UAAU,oBACb,kBAAC,IAAD,CACE0D,YAAY,YACZC,SAAU,SAACC,GAAD,OACR,EAAKrB,kBAAkBqB,EAAEC,OAAOjD,QAElCA,MAAOwC,KAAKtE,MAAM8B,SAGtB,yBAAKZ,UAAU,cACb,kBAAC,IAAO8D,OAAR,CACE3C,MAAM,UACNE,QAAS,kBAAM,EAAKI,QAAQsC,oBAF9B,oBASN,kBAAC,IAAcC,SAAf,MACG,SAACC,GAAD,OACC,kBAAC,cAAD,CACEC,YAAa,GACbC,aAAa,WACbhF,cAAeA,EACfK,WAAYA,EACZT,QAASA,EACT+C,YAAa,EAAKA,YAClBsC,iBAAkB,QAClBC,aAAa,EACbC,gBAAgB,EAChBC,YAAY,EACZvF,mBAAoB,EAAKF,MAAME,mBAC/BwF,eAAe,SACfC,UAAuC,QAA5BR,EAAQnF,MAAM4F,wB,GArUzBC,IAAMC,WAkVf/F","file":"static/js/196.96609b89.chunk.js","sourcesContent":["import React from \"react\";\r\nimport {\r\n  Row,\r\n  Card,\r\n  CardBody,\r\n  Input,\r\n  Button,\r\n  Col,\r\n  UncontrolledDropdown,\r\n  DropdownMenu,\r\n  DropdownItem,\r\n  DropdownToggle,\r\n} from \"reactstrap\";\r\n// import axios from \"axios\";\r\nimport axiosConfig from \"../../../axiosConfig\";\r\n// import { history } from \"../../../history\";\r\nimport { AgGridReact } from \"ag-grid-react\";\r\nimport { ContextLayout } from \"../../../utility/context/Layout\";\r\nimport { ChevronDown, Trash2, Eye, Edit } from \"react-feather\";\r\nimport \"../../../assets/scss/plugins/tables/_agGridStyleOverride.scss\";\r\n// import Breadcrumbs from \"../../../components/@vuexy/breadCrumbs/BreadCrumb\";\r\nimport { Route } from \"react-router-dom\";\r\nimport moment from \"moment\";\r\n\r\nclass UsersList extends React.Component {\r\n  state = {\r\n    rowData: [],\r\n    paginationPageSize: 20,\r\n    currenPageSize: \"\",\r\n    getPageSize: \"\",\r\n    defaultColDef: {\r\n      sortable: true,\r\n      editable: true,\r\n      resizable: true,\r\n      suppressMenu: true,\r\n    },\r\n    columnDefs: [\r\n      {\r\n        headerName: \"S.No\",\r\n        valueGetter: \"node.rowIndex + 1\",\r\n        field: \"node.rowIndex + 1\",\r\n        width: 100,\r\n        filter: true,\r\n        // checkboxSelection: true,\r\n        // headerCheckboxSelectionFilteredOnly: true,\r\n        // headerCheckboxSelection: true,\r\n      },\r\n      {\r\n        headerName: \"First Name\",\r\n        field: \"fullname\",\r\n        width: 120,\r\n        cellRendererFramework: (params) => {\r\n          return (\r\n            <div className=\"d-flex align-items-center cursor-pointer\">\r\n              <span>{params.data.userid.fullname}</span>\r\n            </div>\r\n          );\r\n        },\r\n      },\r\n      {\r\n        headerName: \"Mobile\",\r\n        field: \"mobile\",\r\n        width: 120,\r\n        cellRendererFramework: (params) => {\r\n          return (\r\n            <div className=\"d-flex align-items-center cursor-pointer\">\r\n              <span>{params.data.userid.mobile}</span>\r\n            </div>\r\n          );\r\n        },\r\n      },\r\n\r\n      {\r\n        headerName: \"Email ID\",\r\n        field: \"email\",\r\n        width: 120,\r\n        cellRendererFramework: (params) => {\r\n          return (\r\n            <div className=\"d-flex align-items-center cursor-pointer\">\r\n              <span>{params.data.userid.email}</span>\r\n            </div>\r\n          );\r\n        },\r\n      },\r\n\r\n      {\r\n        headerName: \"Address\",\r\n        field: \"address\",\r\n        width: 120,\r\n        cellRendererFramework: (params) => {\r\n          return (\r\n            <div className=\"d-flex align-items-center cursor-pointer\">\r\n              <span>{params.data.userid.address}</span>\r\n            </div>\r\n          );\r\n        },\r\n      },\r\n      {\r\n        headerName: \"City\",\r\n        field: \"city\",\r\n        width: 120,\r\n        cellRendererFramework: (params) => {\r\n          return (\r\n            <div className=\"d-flex align-items-center cursor-pointer\">\r\n              <span>{params.data.userid.city}</span>\r\n            </div>\r\n          );\r\n        },\r\n      },\r\n      {\r\n        headerName: \"Membership plan\",\r\n        field: \"pack_name\",\r\n        width: 120,\r\n        cellRendererFramework: (params) => {\r\n          return (\r\n            <div className=\"d-flex align-items-center cursor-pointer\">\r\n              <span>{params.data.planId.pack_name}</span>\r\n            </div>\r\n          );\r\n        },\r\n      },\r\n      {\r\n        headerName: \"Start Date\",\r\n        field: \"date\",\r\n        width: 120,\r\n        cellRendererFramework: (params) => {\r\n          return (\r\n            <div className=\"d-flex align-items-center cursor-pointer\">\r\n              {/* <span>{moment(params.data.createdAt).format(\"ll\")} </span> */}\r\n              <span>{params.data.date}</span>\r\n            </div>\r\n          );\r\n        },\r\n      },\r\n\r\n      {\r\n        headerName: \"Expiry Date\",\r\n        field: \"expdate\",\r\n        width: 120,\r\n        cellRendererFramework: (params) => {\r\n          return (\r\n            <div className=\"d-flex align-items-center cursor-pointer\">\r\n              <span>{params.data.expdate}</span>\r\n              {/* <span>{moment(params.data.updatedAt).format(\"ll\")} </span> */}\r\n            </div>\r\n          );\r\n        },\r\n      },\r\n      {\r\n        headerName: \"Status\",\r\n        field: \"status\",\r\n        filter: true,\r\n        width: 150,\r\n        cellRendererFramework: (params) => {\r\n          return params.value === \"Active\" ? (\r\n            <div className=\"badge badge-pill badge-success\">\r\n              {params.data.status}\r\n            </div>\r\n          ) : params.value === \"Deactive\" ? (\r\n            <div className=\"badge badge-pill badge-warning\">\r\n              {params.data.status}\r\n            </div>\r\n          ) : null;\r\n        },\r\n      },\r\n      {\r\n        headerName: \"Actions\",\r\n        field: \"sortorder\",\r\n        width: 120,\r\n        pinned: window.innerWidth > 992 ? \"right\" : false,\r\n        cellRendererFramework: (params) => {\r\n          return (\r\n            <div className=\"actions cursor-pointer\">\r\n              <Route\r\n                render={({ history }) => (\r\n                  <Eye\r\n                    className=\"mr-50\"\r\n                    color=\"green\"\r\n                    size={20}\r\n                    onClick={() =>\r\n                      history.push(`/app/users/viewUsers/${params.data._id}`)\r\n                    }\r\n                  />\r\n                )}\r\n              />\r\n              <Route\r\n                render={({ history }) => (\r\n                  <Edit\r\n                    className=\"mr-50\"\r\n                    size=\"20px\"\r\n                    color=\"blue\"\r\n                    onClick={() =>\r\n                      history.push(`/app/users/editUsers/${params.data._id}`)\r\n                    }\r\n                  />\r\n                )}\r\n              />\r\n\r\n              <Trash2\r\n                className=\"mr-50\"\r\n                size=\"25px\"\r\n                color=\"red\"\r\n                onClick={() => {\r\n                  let selectedData = this.gridApi.getSelectedRows();\r\n                  this.runthisfunction(params.data._id);\r\n                  this.gridApi.updateRowData({ remove: selectedData });\r\n                }}\r\n              />\r\n            </div>\r\n          );\r\n        },\r\n      },\r\n    ],\r\n  };\r\n  async componentDidMount() {\r\n    await axiosConfig.get(\"/allmembership\").then((response) => {\r\n      let rowData = response.data.data;\r\n      this.setState({ rowData });\r\n    });\r\n  }\r\n  async runthisfunction(id) {\r\n    console.log(id);\r\n    await axiosConfig.get(`/dlt_membership/${id}`).then((response) => {\r\n      console.log(response);\r\n    });\r\n  }\r\n\r\n  onGridReady = (params) => {\r\n    this.gridApi = params.api;\r\n    this.gridColumnApi = params.columnApi;\r\n    this.setState({\r\n      currenPageSize: this.gridApi.paginationGetCurrentPage() + 1,\r\n      getPageSize: this.gridApi.paginationGetPageSize(),\r\n      totalPages: this.gridApi.paginationGetTotalPages(),\r\n    });\r\n  };\r\n\r\n  updateSearchQuery = (val) => {\r\n    this.gridApi.setQuickFilter(val);\r\n  };\r\n\r\n  filterSize = (val) => {\r\n    if (this.gridApi) {\r\n      this.gridApi.paginationSetPageSize(Number(val));\r\n      this.setState({\r\n        currenPageSize: val,\r\n        getPageSize: val,\r\n      });\r\n    }\r\n  };\r\n\r\n  render() {\r\n    const { rowData, columnDefs, defaultColDef } = this.state;\r\n    return (\r\n      <Row className=\"app-user-list\">\r\n        <Col sm=\"12\"></Col>\r\n        <Col sm=\"12\">\r\n          <Card>\r\n            <Row className=\"m-2\">\r\n              <Col>\r\n                <h1 col-sm-6 className=\"float-left\">\r\n                  Users List\r\n                </h1>\r\n              </Col>\r\n            </Row>\r\n\r\n            <CardBody className=\"py-0\">\r\n              {this.state.rowData === null ? null : (\r\n                <div className=\"ag-theme-material w-100 my-2 ag-grid-table\">\r\n                  <div className=\"d-flex flex-wrap justify-content-between align-items-center\">\r\n                    <div className=\"mb-1\">\r\n                      <UncontrolledDropdown className=\"p-1 ag-dropdown\">\r\n                        <DropdownToggle tag=\"div\">\r\n                          {this.gridApi\r\n                            ? this.state.currenPageSize\r\n                            : \"\" * this.state.getPageSize -\r\n                              (this.state.getPageSize - 1)}{\" \"}\r\n                          -{\" \"}\r\n                          {this.state.rowData.length -\r\n                            this.state.currenPageSize * this.state.getPageSize >\r\n                          0\r\n                            ? this.state.currenPageSize * this.state.getPageSize\r\n                            : this.state.rowData.length}{\" \"}\r\n                          of {this.state.rowData.length}\r\n                          <ChevronDown className=\"ml-50\" size={15} />\r\n                        </DropdownToggle>\r\n                        <DropdownMenu right>\r\n                          <DropdownItem\r\n                            tag=\"div\"\r\n                            onClick={() => this.filterSize(20)}\r\n                          >\r\n                            20\r\n                          </DropdownItem>\r\n                          <DropdownItem\r\n                            tag=\"div\"\r\n                            onClick={() => this.filterSize(50)}\r\n                          >\r\n                            50\r\n                          </DropdownItem>\r\n                          <DropdownItem\r\n                            tag=\"div\"\r\n                            onClick={() => this.filterSize(100)}\r\n                          >\r\n                            100\r\n                          </DropdownItem>\r\n                          <DropdownItem\r\n                            tag=\"div\"\r\n                            onClick={() => this.filterSize(134)}\r\n                          >\r\n                            134\r\n                          </DropdownItem>\r\n                        </DropdownMenu>\r\n                      </UncontrolledDropdown>\r\n                    </div>\r\n                    <div className=\"d-flex flex-wrap justify-content-between mb-1\">\r\n                      <div className=\"table-input mr-1\">\r\n                        <Input\r\n                          placeholder=\"search...\"\r\n                          onChange={(e) =>\r\n                            this.updateSearchQuery(e.target.value)\r\n                          }\r\n                          value={this.state.value}\r\n                        />\r\n                      </div>\r\n                      <div className=\"export-btn\">\r\n                        <Button.Ripple\r\n                          color=\"primary\"\r\n                          onClick={() => this.gridApi.exportDataAsCsv()}\r\n                        >\r\n                          Export as CSV\r\n                        </Button.Ripple>\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n                  <ContextLayout.Consumer>\r\n                    {(context) => (\r\n                      <AgGridReact\r\n                        gridOptions={{}}\r\n                        rowSelection=\"multiple\"\r\n                        defaultColDef={defaultColDef}\r\n                        columnDefs={columnDefs}\r\n                        rowData={rowData}\r\n                        onGridReady={this.onGridReady}\r\n                        colResizeDefault={\"shift\"}\r\n                        animateRows={true}\r\n                        floatingFilter={false}\r\n                        pagination={true}\r\n                        paginationPageSize={this.state.paginationPageSize}\r\n                        pivotPanelShow=\"always\"\r\n                        enableRtl={context.state.direction === \"rtl\"}\r\n                      />\r\n                    )}\r\n                  </ContextLayout.Consumer>\r\n                </div>\r\n              )}\r\n            </CardBody>\r\n          </Card>\r\n        </Col>\r\n      </Row>\r\n    );\r\n  }\r\n}\r\nexport default UsersList;\r\n\r\n// import React from \"react\";\r\n// import {\r\n//   Card,\r\n//   CardBody,\r\n//   Input,\r\n//   Row,\r\n//   Col,\r\n//   Button,\r\n//   UncontrolledDropdown,\r\n//   DropdownMenu,\r\n//   DropdownItem,\r\n//   DropdownToggle,\r\n// } from \"reactstrap\";\r\n// import axiosConfig from \"../../../axiosConfig\";\r\n// import { ContextLayout } from \"../../../utility/context/Layout\";\r\n// import { AgGridReact } from \"ag-grid-react\";\r\n// import { Eye, Edit, Trash2, ChevronDown } from \"react-feather\";\r\n// //import classnames from \"classnames\";\r\n// import { history } from \"../../../history\";\r\n// import \"../../../assets/scss/plugins/tables/_agGridStyleOverride.scss\";\r\n// import \"../../../assets/scss/pages/users.scss\";\r\n// class SizeList extends React.Component {\r\n//   state = {\r\n//     rowData: [],\r\n//     paginationPageSize: 20,\r\n//     currenPageSize: \"\",\r\n//     getPageSize: \"\",\r\n//     defaultColDef: {\r\n//       sortable: true,\r\n//       editable: true,\r\n//       resizable: true,\r\n//       suppressMenu: true,\r\n//     },\r\n\r\n//     columnDefs: [\r\n//       {\r\n//         headerName: \"S.No\",\r\n//         valueGetter: \"node.rowIndex + 1\",\r\n//         field: \"node.rowIndex + 1\",\r\n//         width: 150,\r\n//         filter: true,\r\n//         // checkboxSelection: true,\r\n//         // headerCheckboxSelectionFilteredOnly: true,\r\n//         // headerCheckboxSelection: true,\r\n//       },\r\n//       {\r\n//         headerName: \"Size \",\r\n//         field: \"sizeName\",\r\n//         filter: true,\r\n//         width: 200,\r\n//         cellRendererFramework: (params) => {\r\n//           return (\r\n//             <div>\r\n//               <span>{params.data.sizeName}</span>\r\n//             </div>\r\n//           );\r\n//         },\r\n//       },\r\n\r\n//       {\r\n//         headerName: \"Actions\",\r\n//         field: \"sortorder\",\r\n//         // field: \"transactions\",\r\n//         width: 150,\r\n//         cellRendererFramework: (params) => {\r\n//           return (\r\n//             <div className=\"actions cursor-pointer\">\r\n//               <Edit\r\n//                 className=\"mr-50\"\r\n//                 color=\"blue\"\r\n//                 size={20}\r\n//                 onClick={() =>\r\n//                   history.push(`/app/size/editSize/${params.data._id}`)\r\n//                 }\r\n//               />\r\n//               <Trash2\r\n//                 size={20}\r\n//                 color=\"red\"\r\n//                 onClick={() => {\r\n//                   let selectedData = this.gridApi.getSelectedRows();\r\n//                   this.runthisfunction(params.data._id);\r\n//                   this.gridApi.updateRowData({ remove: selectedData });\r\n//                 }}\r\n//               />\r\n//             </div>\r\n//           );\r\n//         },\r\n//       },\r\n//     ],\r\n//   };\r\n\r\n//   async componentDidMount() {\r\n//     await axiosConfig\r\n//       .get(\"/getsizebyseller\", {\r\n//         headers: {\r\n//           \"auth-adtoken\": localStorage.getItem(\"auth-adtoken\"),\r\n//         },\r\n//       })\r\n//       .then((response) => {\r\n//         const rowData = response.data.data;\r\n//         console.log(rowData);\r\n//         this.setState({ rowData });\r\n//       });\r\n//   }\r\n//   async runthisfunction(id) {\r\n//     console.log(id);\r\n//     await axiosConfig.get(`/deleteSize/${id}`).then(\r\n//       (response) => {\r\n//         console.log(response);\r\n//       },\r\n//       (error) => {\r\n//         console.log(error);\r\n//       }\r\n//     );\r\n//   }\r\n//   onGridReady = (params) => {\r\n//     this.gridApi = params.api;\r\n//     this.gridColumnApi = params.columnApi;\r\n//     this.setState({\r\n//       currenPageSize: this.gridApi.paginationGetCurrentPage() + 1,\r\n//       getPageSize: this.gridApi.paginationGetPageSize(),\r\n//       totalPages: this.gridApi.paginationGetTotalPages(),\r\n//     });\r\n//   };\r\n\r\n//   updateSearchQuery = (val) => {\r\n//     this.gridApi.setQuickFilter(val);\r\n//   };\r\n\r\n//   filterSize = (val) => {\r\n//     if (this.gridApi) {\r\n//       this.gridApi.paginationSetPageSize(Number(val));\r\n//       this.setState({\r\n//         currenPageSize: val,\r\n//         getPageSize: val,\r\n//       });\r\n//     }\r\n//   };\r\n\r\n//   render() {\r\n//     const { rowData, columnDefs, defaultColDef } = this.state;\r\n//     return (\r\n//       console.log(rowData),\r\n//       (\r\n//         <Row className=\"app-user-list\">\r\n//           <Col sm=\"12\"></Col>\r\n//           <Col sm=\"12\">\r\n//             <Card>\r\n//               <Row className=\"m-2\">\r\n//                 <Col>\r\n//                   <h1 sm=\"6\" className=\"float-left\">\r\n//                     Size List\r\n//                   </h1>\r\n//                 </Col>\r\n//                 <Col>\r\n//                   <Button\r\n//                     className=\" btn btn-danger float-right\"\r\n//                     onClick={() => history.push(\"/app/size/addSize\")}\r\n//                   >\r\n//                     Add Size\r\n//                   </Button>\r\n//                 </Col>\r\n//               </Row>\r\n//               <CardBody>\r\n//                 {this.state.rowData === null ? null : (\r\n//                   <div className=\"ag-theme-material w-100 my-2 ag-grid-table\">\r\n//                     <div className=\"d-flex flex-wrap justify-content-between align-items-center\">\r\n//                       <div className=\"mb-1\">\r\n//                         <UncontrolledDropdown className=\"p-1 ag-dropdown\">\r\n//                           <DropdownToggle tag=\"div\">\r\n//                             {this.gridApi\r\n//                               ? this.state.currenPageSize\r\n//                               : \"\" * this.state.getPageSize -\r\n//                                 (this.state.getPageSize - 1)}{\" \"}\r\n//                             -{\" \"}\r\n//                             {this.state.rowData.length -\r\n//                               this.state.currenPageSize *\r\n//                                 this.state.getPageSize >\r\n//                             0\r\n//                               ? this.state.currenPageSize *\r\n//                                 this.state.getPageSize\r\n//                               : this.state.rowData.length}{\" \"}\r\n//                             of {this.state.rowData.length}\r\n//                             <ChevronDown className=\"ml-50\" size={15} />\r\n//                           </DropdownToggle>\r\n//                           <DropdownMenu right>\r\n//                             <DropdownItem\r\n//                               tag=\"div\"\r\n//                               onClick={() => this.filterSize(20)}\r\n//                             >\r\n//                               20\r\n//                             </DropdownItem>\r\n//                             <DropdownItem\r\n//                               tag=\"div\"\r\n//                               onClick={() => this.filterSize(50)}\r\n//                             >\r\n//                               50\r\n//                             </DropdownItem>\r\n//                             <DropdownItem\r\n//                               tag=\"div\"\r\n//                               onClick={() => this.filterSize(100)}\r\n//                             >\r\n//                               100\r\n//                             </DropdownItem>\r\n//                             <DropdownItem\r\n//                               tag=\"div\"\r\n//                               onClick={() => this.filterSize(134)}\r\n//                             >\r\n//                               134\r\n//                             </DropdownItem>\r\n//                           </DropdownMenu>\r\n//                         </UncontrolledDropdown>\r\n//                       </div>\r\n//                       <div className=\"d-flex flex-wrap justify-content-between mb-1\">\r\n//                         <div className=\"table-input mr-1\">\r\n//                           <Input\r\n//                             placeholder=\"search...\"\r\n//                             onChange={(e) =>\r\n//                               this.updateSearchQuery(e.target.value)\r\n//                             }\r\n//                             value={this.state.value}\r\n//                           />\r\n//                         </div>\r\n//                         <div className=\"export-btn\">\r\n//                           <Button.Ripple\r\n//                             color=\"primary\"\r\n//                             onClick={() => this.gridApi.exportDataAsCsv()}\r\n//                           >\r\n//                             Export as CSV\r\n//                           </Button.Ripple>\r\n//                         </div>\r\n//                       </div>\r\n//                     </div>\r\n//                     <ContextLayout.Consumer>\r\n//                       {(context) => (\r\n//                         <AgGridReact\r\n//                           gridOptions={{}}\r\n//                           rowSelection=\"multiple\"\r\n//                           defaultColDef={defaultColDef}\r\n//                           columnDefs={columnDefs}\r\n//                           rowData={rowData}\r\n//                           onGridReady={this.onGridReady}\r\n//                           colResizeDefault={\"shift\"}\r\n//                           animateRows={true}\r\n//                           floatingFilter={false}\r\n//                           pagination={true}\r\n//                           paginationPageSize={this.state.paginationPageSize}\r\n//                           pivotPanelShow=\"always\"\r\n//                           enableRtl={context.state.direction === \"rtl\"}\r\n//                         />\r\n//                       )}\r\n//                     </ContextLayout.Consumer>\r\n//                   </div>\r\n//                 )}\r\n//               </CardBody>\r\n//             </Card>\r\n//           </Col>\r\n//         </Row>\r\n//       )\r\n//     );\r\n//   }\r\n// }\r\n// export default SizeList;\r\n"],"sourceRoot":""}