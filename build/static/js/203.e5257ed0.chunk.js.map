{"version":3,"sources":["views/apps/subplan/SubPlanVideos.js"],"names":["SubPlanVideos","state","rowData","paginationPageSize","currenPageSize","getPageSize","defaultColDef","sortable","editable","resizable","suppressMenu","columnDefs","headerName","field","filter","width","pinned","window","innerWidth","cellRendererFramework","params","className","data","video_link","associated_plan","render","history","size","color","onClick","push","_id","onGridReady","gridApi","api","gridColumnApi","columnApi","setState","paginationGetCurrentPage","paginationGetPageSize","totalPages","paginationGetTotalPages","updateSearchQuery","val","setQuickFilter","filterSize","paginationSetPageSize","Number","axiosConfig","get","then","response","console","log","id","this","Fragment","col-sm-6","tag","length","right","placeholder","onChange","e","target","value","Ripple","exportDataAsCsv","Consumer","context","gridOptions","rowSelection","colResizeDefault","animateRows","floatingFilter","pagination","pivotPanelShow","enableRtl","direction","React","Component"],"mappings":";iqNAsBMA,E,4MACJC,MAAQ,CACNC,QAAS,GACTC,mBAAoB,GACpBC,eAAgB,GAChBC,YAAa,GACbC,cAAe,CACbC,UAAU,EACVC,UAAU,EACVC,WAAW,EACXC,cAAc,GAEhBC,WAAY,CAEV,CACEC,WAAY,aACZC,MAAO,aACPC,QAAQ,EACRC,MAAO,IACPC,OAAQC,OAAOC,WAAa,KAAM,OAClCC,sBAAuB,SAACC,GACtB,OACE,yBAAKC,UAAU,4CACb,8BAAOD,EAAOE,KAAKC,eAK3B,CACEX,WAAY,kBACZC,MAAO,kBACPC,QAAQ,EACRC,MAAO,IACPC,OAAQC,OAAOC,WAAa,KAAM,OAClCC,sBAAuB,SAACC,GACtB,OACE,yBAAKC,UAAU,4CACb,8BAAOD,EAAOE,KAAKE,oBAK3B,CACEZ,WAAY,UACZC,MAAO,YACPE,MAAO,IACPI,sBAAuB,SAACC,GACtB,OACE,yBAAKC,UAAU,0BAOZ,kBAAC,IAAD,CACCI,OAAQ,gBAAGC,EAAH,EAAGA,QAAH,OACV,kBAAC,IAAD,CACEL,UAAU,QACVM,KAAK,OACLC,MAAM,OACNC,QAAS,kBACPH,EAAQI,KAAR,yCAEoCV,EAAOE,KAAKS,iB,EAsChEC,YAAc,SAACZ,GACb,EAAKa,QAAUb,EAAOc,IACtB,EAAKC,cAAgBf,EAAOgB,UAC5B,EAAKC,SAAS,CACZjC,eAAgB,EAAK6B,QAAQK,2BAA6B,EAC1DjC,YAAa,EAAK4B,QAAQM,wBAC1BC,WAAY,EAAKP,QAAQQ,6B,EAI7BC,kBAAoB,SAACC,GACnB,EAAKV,QAAQW,eAAeD,I,EAG9BE,WAAa,SAACF,GACR,EAAKV,UACP,EAAKA,QAAQa,sBAAsBC,OAAOJ,IAC1C,EAAKN,SAAS,CACZjC,eAAgBuC,EAChBtC,YAAasC,M,8FAnCnB,yGACQK,IAAYC,IAAI,kBAAkBC,MAAK,SAACC,GAC5C,IAAMjD,EAAUiD,EAAS7B,KAAKA,KAC9B8B,QAAQC,IAAInD,GACZ,EAAKmC,SAAS,CAAEnC,eAJpB,2C,0HAOA,WAAsBoD,GAAtB,wEACEF,QAAQC,IAAIC,GADd,SAEQN,IACHC,IADG,4BACsBK,IACzBJ,MAAK,SAACC,GACLC,QAAQC,IAAIF,MALlB,2C,2EAiCA,WAAU,IAAD,OACP,EAA+CI,KAAKtD,MAA5CC,EAAR,EAAQA,QAASS,EAAjB,EAAiBA,WAAYL,EAA7B,EAA6BA,cAC7B,OACE,kBAAC,IAAMkD,SAAP,KAME,kBAAC,IAAD,CAAMnC,UAAU,+BAChB,kBAAC,IAAD,CAAKA,UAAU,OACX,kBAAC,IAAD,KACE,wBAAIoC,YAAA,EAASpC,UAAU,cAAvB,6BAKJ,kBAAC,IAAD,CAAUA,UAAU,QACM,OAAvBkC,KAAKtD,MAAMC,QAAmB,KAC7B,yBAAKmB,UAAU,8CACb,yBAAKA,UAAU,+DACb,yBAAKA,UAAU,QACb,kBAAC,IAAD,CAAsBA,UAAU,mBAC9B,kBAAC,IAAD,CAAgBqC,IAAI,OACjBH,KAAKtB,QACFsB,KAAKtD,MAAMG,eACX,GAAKmD,KAAKtD,MAAMI,aACfkD,KAAKtD,MAAMI,YAAc,GAAI,IAJpC,IAKI,IACDkD,KAAKtD,MAAMC,QAAQyD,OAClBJ,KAAKtD,MAAMG,eAAiBmD,KAAKtD,MAAMI,YACzC,EACIkD,KAAKtD,MAAMG,eAAiBmD,KAAKtD,MAAMI,YACvCkD,KAAKtD,MAAMC,QAAQyD,OAAQ,IAVjC,MAWMJ,KAAKtD,MAAMC,QAAQyD,OACvB,kBAAC,IAAD,CAAatC,UAAU,QAAQM,KAAM,MAEvC,kBAAC,IAAD,CAAciC,OAAK,GACjB,kBAAC,IAAD,CACEF,IAAI,MACJ7B,QAAS,kBAAM,EAAKgB,WAAW,MAFjC,MAMA,kBAAC,IAAD,CACEa,IAAI,MACJ7B,QAAS,kBAAM,EAAKgB,WAAW,MAFjC,MAMA,kBAAC,IAAD,CACEa,IAAI,MACJ7B,QAAS,kBAAM,EAAKgB,WAAW,OAFjC,OAMA,kBAAC,IAAD,CACEa,IAAI,MACJ7B,QAAS,kBAAM,EAAKgB,WAAW,OAFjC,UASN,yBAAKxB,UAAU,iDACb,yBAAKA,UAAU,oBACb,kBAAC,IAAD,CACEwC,YAAY,YACZC,SAAU,SAACC,GAAD,OAAO,EAAKrB,kBAAkBqB,EAAEC,OAAOC,QACjDA,MAAOV,KAAKtD,MAAMgE,SAGtB,yBAAK5C,UAAU,cACb,kBAAC,IAAO6C,OAAR,CACEtC,MAAM,UACNC,QAAS,kBAAM,EAAKI,QAAQkC,oBAF9B,oBASN,kBAAC,IAAcC,SAAf,MACG,SAACC,GAAD,OACC,kBAAC,cAAD,CACEC,YAAa,GACbC,aAAa,WACbjE,cAAeA,EACfK,WAAYA,EACZT,QAASA,EACT8B,YAAa,EAAKA,YAClBwC,iBAAkB,QAClBC,aAAa,EACbC,gBAAgB,EAChBC,YAAY,EACZxE,mBAAoB,EAAKF,MAAME,mBAC/ByE,eAAe,SACfC,UAAuC,QAA5BR,EAAQpE,MAAM6E,uB,GAhOnBC,IAAMC,WA4OnBhF","file":"static/js/203.e5257ed0.chunk.js","sourcesContent":["import React from \"react\";\nimport {\n  Row,\n  Col,\n  Card,\n  CardBody,\n  Input,\n  Button,\n  UncontrolledDropdown,\n  DropdownMenu,\n  DropdownItem,\n  DropdownToggle,\n} from \"reactstrap\";\nimport { AgGridReact } from \"ag-grid-react\";\nimport { ContextLayout } from \"../../../utility/context/Layout\";\nimport { ChevronDown, Edit } from \"react-feather\";\nimport axiosConfig from \"../../../axiosConfig\";\nimport \"../../../assets/scss/plugins/tables/_agGridStyleOverride.scss\";\n// import Breadcrumbs from \"../../../components/@vuexy/breadCrumbs/BreadCrumb\";\n// import { history } from \"../../../history\";\nimport { Route } from \"react-router-dom\";\n\nclass SubPlanVideos extends React.Component {\n  state = {\n    rowData: [],\n    paginationPageSize: 20,\n    currenPageSize: \"\",\n    getPageSize: \"\",\n    defaultColDef: {\n      sortable: true,\n      editable: true,\n      resizable: true,\n      suppressMenu: true,\n    },\n    columnDefs: [\n   \n      {\n        headerName: \"Video Link\",\n        field: \"video_link\",\n        filter: true,\n        width: 250,\n        pinned: window.innerWidth > 992 ? \"left\" : false,\n        cellRendererFramework: (params) => {\n          return (\n            <div className=\"d-flex align-items-center cursor-pointer\">\n              <span>{params.data.video_link}</span>\n            </div>\n          );\n        },\n      },\n      {\n        headerName: \"Associated Plan\",\n        field: \"associated_plan\",\n        filter: true,\n        width: 250,\n        pinned: window.innerWidth > 992 ? \"left\" : false,\n        cellRendererFramework: (params) => {\n          return (\n            <div className=\"d-flex align-items-center cursor-pointer\">\n              <span>{params.data.associated_plan}</span>\n            </div>\n          );\n        },\n      },\n      {\n        headerName: \"Actions\",\n        field: \"sortorder\",\n        width: 150,\n        cellRendererFramework: (params) => {\n          return (\n            <div className=\"actions cursor-pointer\">\n              {/* <Eye\n                className=\"mr-50\"\n                size=\"25px\"\n                color=\"green\"\n                onClick={() => history.push(\"/#/app/staffManagement/staffForm\")}\n              /> */}\n               <Route\n                render={({ history }) => (\n              <Edit\n                className=\"mr-50\"\n                size=\"25px\"\n                color=\"blue\"\n                onClick={() =>\n                  history.push(\n                    \n                    `/app/subplan/editSubplanvideos/${params.data._id}`     )\n                  }\n                />\n              )}\n            />\n              {/* <Trash2\n                className=\"mr-50\"\n                size=\"25px\"\n                color=\"red\"\n                onClick={() => {\n                  let selectedData = this.gridApi.getSelectedRows();\n                  this.runthisfunction(params.data._id);\n                  this.gridApi.updateRowData({ remove: selectedData });\n                }}\n              /> */}\n            </div>\n          );\n        },\n      },\n    ],\n  };\n\n  async componentDidMount() {\n    await axiosConfig.get(\"/admin/allplan\").then((response) => {\n      const rowData = response.data.data;\n      console.log(rowData);\n      this.setState({ rowData });\n    });\n  }\n  async runthisfunction(id) {\n    console.log(id);\n    await axiosConfig\n      .get(`/admin/deleteplan/${id}`)\n      .then((response) => {\n        console.log(response);\n      });\n  }\n\n  onGridReady = (params) => {\n    this.gridApi = params.api;\n    this.gridColumnApi = params.columnApi;\n    this.setState({\n      currenPageSize: this.gridApi.paginationGetCurrentPage() + 1,\n      getPageSize: this.gridApi.paginationGetPageSize(),\n      totalPages: this.gridApi.paginationGetTotalPages(),\n    });\n  };\n\n  updateSearchQuery = (val) => {\n    this.gridApi.setQuickFilter(val);\n  };\n\n  filterSize = (val) => {\n    if (this.gridApi) {\n      this.gridApi.paginationSetPageSize(Number(val));\n      this.setState({\n        currenPageSize: val,\n        getPageSize: val,\n      });\n    }\n  };\n\n  render() {\n    const { rowData, columnDefs, defaultColDef } = this.state;\n    return (\n      <React.Fragment>\n        {/* <Breadcrumbs\n          breadCrumbTitle=\"Subscription Plan Video\"\n          breadCrumbParent=\"Forms & Tables\"\n          breadCrumbActive=\"Subscription Plan Video\"\n        /> */}\n        <Card className=\"overflow-hidden agGrid-card\">\n        <Row className=\"m-1\">\n            <Col>\n              <h1 col-sm-6 className=\"float-left\">\n              Subscription Plan Video\n              </h1>\n            </Col>\n          </Row>\n          <CardBody className=\"py-0\">\n            {this.state.rowData === null ? null : (\n              <div className=\"ag-theme-material w-100 my-2 ag-grid-table\">\n                <div className=\"d-flex flex-wrap justify-content-between align-items-center\">\n                  <div className=\"mb-1\">\n                    <UncontrolledDropdown className=\"p-1 ag-dropdown\">\n                      <DropdownToggle tag=\"div\">\n                        {this.gridApi\n                          ? this.state.currenPageSize\n                          : \"\" * this.state.getPageSize -\n                            (this.state.getPageSize - 1)}{\" \"}\n                        -{\" \"}\n                        {this.state.rowData.length -\n                          this.state.currenPageSize * this.state.getPageSize >\n                        0\n                          ? this.state.currenPageSize * this.state.getPageSize\n                          : this.state.rowData.length}{\" \"}\n                        of {this.state.rowData.length}\n                        <ChevronDown className=\"ml-50\" size={15} />\n                      </DropdownToggle>\n                      <DropdownMenu right>\n                        <DropdownItem\n                          tag=\"div\"\n                          onClick={() => this.filterSize(20)}\n                        >\n                          20\n                        </DropdownItem>\n                        <DropdownItem\n                          tag=\"div\"\n                          onClick={() => this.filterSize(50)}\n                        >\n                          50\n                        </DropdownItem>\n                        <DropdownItem\n                          tag=\"div\"\n                          onClick={() => this.filterSize(100)}\n                        >\n                          100\n                        </DropdownItem>\n                        <DropdownItem\n                          tag=\"div\"\n                          onClick={() => this.filterSize(134)}\n                        >\n                          134\n                        </DropdownItem>\n                      </DropdownMenu>\n                    </UncontrolledDropdown>\n                  </div>\n                  <div className=\"d-flex flex-wrap justify-content-between mb-1\">\n                    <div className=\"table-input mr-1\">\n                      <Input\n                        placeholder=\"search...\"\n                        onChange={(e) => this.updateSearchQuery(e.target.value)}\n                        value={this.state.value}\n                      />\n                    </div>\n                    <div className=\"export-btn\">\n                      <Button.Ripple\n                        color=\"primary\"\n                        onClick={() => this.gridApi.exportDataAsCsv()}\n                      >\n                        Export as CSV\n                      </Button.Ripple>\n                    </div>\n                  </div>\n                </div>\n                <ContextLayout.Consumer>\n                  {(context) => (\n                    <AgGridReact\n                      gridOptions={{}}\n                      rowSelection=\"multiple\"\n                      defaultColDef={defaultColDef}\n                      columnDefs={columnDefs}\n                      rowData={rowData}\n                      onGridReady={this.onGridReady}\n                      colResizeDefault={\"shift\"}\n                      animateRows={true}\n                      floatingFilter={true}\n                      pagination={true}\n                      paginationPageSize={this.state.paginationPageSize}\n                      pivotPanelShow=\"always\"\n                      enableRtl={context.state.direction === \"rtl\"}\n                    />\n                  )}\n                </ContextLayout.Consumer>\n              </div>\n            )}\n          </CardBody>\n        </Card>\n      </React.Fragment>\n    );\n  }\n}\nexport default SubPlanVideos;"],"sourceRoot":""}